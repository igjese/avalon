


# 14. historical data

Historical Data: You can also keep track of machine utilization, production rates, and other relevant metrics over time. This historical data can then be displayed in various formats, such as charts or logs, to help players make informed decisions.

You might want to create specialized classes or data structures to hold this historical data. The granularity of the data would depend on how detailed you want the history to be and how much computational resources you're willing to allocate for this feature.

Would you like to discuss these topics in more detail?




User
about historical data:

machines change over time, get installed/uninstalled, their quantity changes, etc - might not make sense to keep history data for machines

what doesn't change are resources - maybe we simply keep track of production/consumption data similar to as factorio does

also, systems and subsystems will be pretty much fixed 
ChatGPT
Keeping track of resources over time makes a lot of sense, especially if machines are frequently changed. Tracking resource utilization, production, and consumption can provide useful insights for players without adding unnecessary complexity related to tracking each machine's historical data. It's simpler to implement and likely more useful for gameplay.

Resource-Based Metrics:
Production Rate: This could be the rate at which each resource is being produced per tick or over a longer time period (e.g., 5 minutes, 1 hour in-game time).

Consumption Rate: Similarly, track how fast each resource is being consumed. This can help players identify potential bottlenecks or overproduction.

Net Gain/Loss: This could be an aggregated metric that takes into account both production and consumption to give a net figure. If this number is negative, it indicates the player is consuming more than producing, which is critical information.

Resource Availability: Track the average and peak availability of each resource over time. This helps the player understand how close they are to running out or overflowing storage for a particular resource.

System/Subsystem Metrics:
Given that systems and subsystems are relatively fixed:

Utilization Rate: For each system or subsystem, you could keep track of the percentage of time it's actively processing vs idle. This could be used to identify inefficiencies at a higher level.

System Status: Like machine status, each system/subsystem can have an aggregated status that summarizes the statuses of its component machines.

Reporting:
Charts: Utilize time-series charts to depict these metrics over time.

Alarms/Notifications: Based on these metrics, generate alarms or notifications if certain thresholds are crossed (e.g., low resource availability, high consumption rate, etc.)

Snapshots: Periodically save the state of these metrics to provide a "historical snapshot" that players can refer to.

Would these approaches fit within your vision for the game?




User
also, we might not care how much Kryptonite is available in Kryptonite mines, but we might care a lot how much of it is available in Superman Suppression system on the ship - never mind bad example, but we probably want to track production/consumption (and thus net gain/loss) by location, system, subsystem.. correct?
ChatGPT
Absolutely, location-specific tracking could add a layer of strategic depth and realism to the game. Knowing where resources are being used or produced most heavily can inform a lot of decisions.

Here's how you could break it down:

Location-Specific Metrics
System/Subsystem Resource Metrics:

Track production, consumption, and net gain/loss for each system and subsystem.
For example: The "Power Plant" system might produce 'Energy', whereas the "Life Support" subsystem might consume 'Oxygen' and 'Energy'.
Global Metrics:

These would still exist and provide an overall snapshot, but the system/subsystem metrics can feed into this for a comprehensive view.
Storage Location:

Knowing where resources are stored can be crucial for logistical reasons. For example, it wouldn't be efficient to produce food in one part of the ship but store it far away from where it's consumed.
Resource Transit:

If resources have to move from one part of the ship to another, tracking how long this takes and the efficiency of the process could add another layer of complexity.
Priority Metrics:

Some systems or subsystems may be more critical than others. Having a "priority" metric that indicates which systems should get resources first in times of scarcity can add another layer of strategy.
How to Implement:
Tagging Resources:

When a resource is produced, it can be tagged with its system of origin. This would allow you to track how much of each resource is being produced where.
Database Schema:

Each resource entry could include a field for its location, making it easy to query location-specific stats.
Reporting:

These new metrics can feed into whatever reporting mechanisms you're already planning, whether that's charts, logs, or alerts.
Would this sort of location-specific tracking align with your vision for the game?




User
let's think about it in "records" terms, like in database, or logs - what do we need in each record/line item?
ChatGPT
Sure, if you're thinking in terms of database records or log lines, each entry would need to capture a variety of fields to provide a comprehensive picture of resource transactions in the game. Here's what a basic schema could look like:

Resource Transaction Schema
Timestamp:

When the transaction occurred. This would be in "game time."
Resource Type:

What kind of resource is being produced or consumed (e.g., Energy, Oxygen, Food).
Transaction Type:

Whether the resource was produced or consumed.
Amount:

The quantity of the resource produced or consumed.
System ID:

Which system the resource is linked to (e.g., Power Plant, Life Support).
Subsystem ID:

Which subsystem within the system (if applicable).
Component ID:

Specific component within the subsystem that was involved (if applicable).
Location ID:

Where this resource is stored or where the transaction happened. Could be specific to a sector of the ship or a specific storage unit.
Priority Level:

Optional. If certain systems or subsystems have set priorities, log that here.
Status:

Current status of the component, system, or subsystem involved in the transaction (e.g., Operational, Malfunctioning, Inactive).
Buffer Status:

The amount of buffered input and output resources for the component (if applicable).
Example Log Line or Database Record
Timestamp	Resource_Type	Transaction_Type	Amount	System_ID	Subsystem_ID	Component_ID	Location_ID	Priority_Level	Status	Buffer_Status
1001	Energy	Produce	50	1	2	5	2	High	Operational	0/10
1002	Oxygen	Consume	10	1	3	6	3	Low	Operational	3/0
This schema could be tailored to your specific needs but should offer a comprehensive snapshot for every resource transaction in the game. Would this work for you?




User
I like the example record format, could you repeat but without components nor buffer since components are volatile
ChatGPT
Certainly! If you're not including components and their buffer status, the schema could be simplified like this:

Resource Transaction Schema (Simplified)
Timestamp:

When the transaction occurred. This would be in "game time."
Resource Type:

What kind of resource is being produced or consumed (e.g., Energy, Oxygen, Food).
Transaction Type:

Whether the resource was produced or consumed.
Amount:

The quantity of the resource produced or consumed.
System ID:

Which system the resource is linked to (e.g., Power Plant, Life Support).
Subsystem ID:

Which subsystem within the system (if applicable).
Location ID:

Where this resource is stored or where the transaction happened. Could be specific to a sector of the ship or a specific storage unit.
Priority Level:

Optional. If certain systems or subsystems have set priorities, log that here.
Status:

Current status of the system or subsystem involved in the transaction (e.g., Operational, Malfunctioning, Inactive).
Example Log Line or Database Record (Simplified)
Timestamp	Resource_Type	Transaction_Type	Amount	System_ID	Subsystem_ID	Location_ID	Priority_Level	Status
1001	Energy	Produce	50	1	2	2	High	Operational
1002	Oxygen	Consume	10	1	3	3	Low	Operational
This simplified schema still gives you a snapshot of resource transactions but omits the more volatile details associated with specific components and their buffer states. Would this be more aligned with your requirements?




User
remove priority and status, they are not directly related to the resource transaction

list the fields as before but in one line each (plus table example as before)

and then give few examples of charts/report we can produce from such schema
ChatGPT
Resource Transaction Schema (Further Simplified)
Timestamp: When the transaction occurred in "game time."
Resource Type: The kind of resource involved (e.g., Energy, Oxygen).
Transaction Type: The type of transaction (Produced or Consumed).
Amount: The quantity of the resource involved.
System ID: Identifier for the system involved (e.g., Power Plant).
Subsystem ID: Identifier for the subsystem within the system (if applicable).
Location ID: Identifier for where this resource is stored or where the transaction happened.
Example Log Line or Database Record (Further Simplified)
Timestamp	Resource_Type	Transaction_Type	Amount	System_ID	Subsystem_ID	Location_ID
1001	Energy	Produce	50	1	2	2
1002	Oxygen	Consume	10	1	3	3
Potential Reports/Charts:
Resource Production Over Time: Line chart displaying production rates for each resource type.

Resource Consumption Over Time: Similar to production but for consumption rates.

Resource Surplus/Deficit: A chart showing the net surplus or deficit for each resource type.

System-Specific Resource Usage: Bar chart or pie chart breaking down resource usage or production by system.

Subsystem-Specific Resource Usage: Similar to the system-specific chart but for subsystems.

Location-Specific Resource Inventory: Stacked bar or pie chart showing the amount of each resource type stored at different locations.

Resource Availability Heatmap: Heatmap showing where each resource is most and least abundant.

Resource Transaction Timeline: A Gantt chart or similar showing all transactions in a given time period, color-coded by type of transaction (production or consumption).

Global Resource Flow: Sankey diagram showing how resources move between different systems, subsystems, and locations.

Critical Resource Points: A table highlighting moments where resource levels reached critically low or high points, which might require player attention.

